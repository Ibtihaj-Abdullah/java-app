version: 2.1

executors:
  java-executor:
    docker:
      - image: eclipse-temurin:17-jdk  # Official Java 17 Image

jobs:
  build:
    executor: java-executor
    steps:
      - checkout
      - run:
          name: Install Required Packages (tar, gzip & Maven)
          command: |
            echo "Updating package lists..."
            apt-get update
            echo "Installing tar and gzip..."
            apt-get install -y tar gzip
            echo "Installing Maven..."
            apt-get install -y maven
            echo "Verifying installations..."
            tar --version
            gzip --version
            mvn -version
      - run:
          name: Verify Code Exists
          command: ls -la
      - run:
          name: Build with Maven
          command: mvn clean package
      - persist_to_workspace:
          root: .
          paths:
            - target/demo-0.0.1-SNAPSHOT.jar

  docker-push:
    docker:
      - image: amazon/aws-cli
    environment:
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install tar, gzip and Docker
          command: |
            echo "Installing tar and gzip..."
            yum install -y tar gzip
            echo "Installing Docker..."
            yum install -y amazon-linux-extras
            amazon-linux-extras install -y docker
            # Start Docker daemon directly
            dockerd > /var/log/dockerd.log 2>&1 &
            # Wait for Docker to be ready
            sleep 10
            echo "Verifying installations..."
            tar --version
            gzip --version
            docker --version
            docker info
      - attach_workspace:
          at: .
      - run:
          name: Configure AWS
          command: |
            # Configure AWS credentials
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            # Verify AWS configuration
            aws configure list
            # Test AWS credentials
            aws sts get-caller-identity
      - run:
          name: Build and Push Docker Image
          command: |
            # Get AWS account ID
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            # Build and tag the image
            docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/java-ecs-ci-cd:latest .
            # Login to ECR
            aws ecr get-login-password | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
            # Push the image
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/java-ecs-ci-cd:latest

  deploy:
    docker:
      - image: amazon/aws-cli
    environment:
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - checkout
      - run:
          name: Configure AWS
          command: |
            # Configure AWS credentials
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            # Verify AWS configuration
            aws configure list
            # Test AWS credentials
            aws sts get-caller-identity
      - run:
          name: Deploy to ECS
          no_output_timeout: 30m
          command: |
            # Update the service
            aws ecs update-service --cluster java-cluster --service java-service --force-new-deployment

            # Wait for service to be stable
            echo "Waiting for service deployment to complete..."
            aws ecs wait services-stable \
              --cluster java-cluster \
              --services java-service

            # Verify deployment status
            DEPLOYMENT_STATUS=$(aws ecs describe-services \
              --cluster java-cluster \
              --services java-service \
              --query 'services[0].deployments[0].status' \
              --output text)

            if [ "$DEPLOYMENT_STATUS" != "PRIMARY" ]; then
              echo "Deployment failed with status: $DEPLOYMENT_STATUS"
              exit 1
            fi

            echo "Deployment completed successfully!"

workflows:
  version: 2
  ci-cd:
    jobs:
      - build
      - docker-push:
          requires:
            - build
      - deploy:
          requires:
            - docker-push
